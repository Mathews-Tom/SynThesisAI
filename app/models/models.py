"""Define database models for the application."""

# Standard Library
from datetime import datetime
from decimal import Decimal
from typing import Any, Dict, List, Optional

# Third-Party Library
from sqlalchemy import (
    JSON,
    Column,
    DateTime,
    ForeignKey,
    Integer,
    Numeric,
    String,
    Text,
)
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func

# SynThesisAI Modules
from .database import Base


class Batch(Base):
    """Database model for a batch of problems.

    Attributes:
        id: Unique batch identifier.
        name: Name of the batch.
        taxonomy_json: Taxonomy data in JSON format.
        pipeline: Pipeline configuration in JSON format.
        num_problems: Total number of problems in the batch.
        batch_cost: Cumulative cost for the batch.
        created_at: Timestamp when the batch was created.
        updated_at: Timestamp when the batch was last updated.
        problems: List of associated Problem instances.
    """

    __tablename__ = "batches"

    id: int = Column(Integer, primary_key=True, index=True)
    name: str = Column(String(255))
    taxonomy_json: Any = Column(JSON)
    pipeline: Any = Column(JSON)
    num_problems: int = Column(Integer)
    batch_cost: Decimal = Column(Numeric(12, 6), default=0.00)
    created_at: datetime = Column(DateTime(timezone=True), server_default=func.now())
    updated_at: Optional[datetime] = Column(DateTime(timezone=True), onupdate=func.now())

    problems: List["Problem"] = relationship("Problem", back_populates="batch")


class Problem(Base):
    """Database model for an individual problem.

    Attributes:
        id: Unique problem identifier.
        subject: Subject category of the problem.
        topic: Topic within the subject.
        question: The problem statement.
        answer: The correct answer to the problem.
        hints: Hints for solving the problem.
        rejection_reason: Reason for rejection, if any.
        status: Current status ('discarded', 'solved', or 'valid').
        batch_id: Foreign key to the associated Batch.
        created_at: Timestamp when the problem was created.
        updated_at: Timestamp when the problem was last updated.
        problem_embedding: Embedding data for the problem.
        similar_problems: Mapping of similar problems.
        cost: Cost associated with the problem.
        target_model_answer: Answer generated by the target model.
        hints_were_corrected: Flag indicating if hints were corrected.
        reference: External reference identifier.
        batch: The associated Batch instance.
    """

    __tablename__ = "problems"

    id: int = Column(Integer, primary_key=True, index=True)
    subject: str = Column(String(100))
    topic: str = Column(String(100))
    question: str = Column(Text)
    answer: str = Column(Text)
    hints: Any = Column(JSON)
    rejection_reason: Optional[str] = Column(Text, nullable=True)
    status: str = Column(String(20))
    batch_id: int = Column(Integer, ForeignKey("batches.id"))
    created_at: datetime = Column(DateTime(timezone=True), server_default=func.now())
    updated_at: Optional[datetime] = Column(DateTime(timezone=True), onupdate=func.now())
    problem_embedding: Optional[Any] = Column(JSON, nullable=True)
    similar_problems: Dict[str, Any] = Column(JSON, default={})
    cost: Decimal = Column(Numeric(10, 6), default=0.00)
    target_model_answer: Optional[str] = Column(Text, nullable=True)
    hints_were_corrected: int = Column(Integer, default=0)
    reference: Optional[str] = Column(String(255), nullable=True)

    batch: "Batch" = relationship("Batch", back_populates="problems")
